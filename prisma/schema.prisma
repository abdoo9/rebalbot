generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  telegramId BigInt    @unique @map("telegram_id")
  contact    String?
  updatedAt  DateTime  @updatedAt @map("updated_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  Request    Request[]

  @@map(name: "users")
}

model Request {
  id                    Int       @id @unique @default(autoincrement())
  userId                Int       @map("user_id")
  messageId             Int       @map("message_id")
  fromCurrency          String?   @map("from_currency")
  toCurrency            String?   @map("to_currency")
  submittedAt           DateTime? @map("submitted_at")
  amount                Float?
  fee                   Float?
  feeThreshold          Float?    @map("fee_threshold")
  finalAmount           Float?    @map("final_amount")
  description           String?
  userReceivingWallet   String?   @map("user_receiving_wallet")
  transactionId         String?   @map("transaction_id")
  photoId               String?   @map("photo_id")
  adminConfirmedReceipt Boolean?  @map("admin_confirmed_receipt")
  adminPaidAmount       Float?    @map("admin_paid_amount")
  exchangeRate          Float     @map("exchange_rate")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  User                  User      @relation(fields: [userId], references: [id])

  @@map(name: "requests")
}

model ExchangeRate {
  id           Int      @id @default(autoincrement())
  from         String   @map("from_currency")
  to           String   @map("to_currency")
  FromCurrency Currency @relation("FromCurrencyExchangeRates", fields: [from], references: [currency])
  ToCurrency   Currency @relation("ToCurrencyExchangeRates", fields: [to], references: [currency])
  rate         Float
  fee          Float
  feeThreshold Float    @default(100) @map("fee_threshold")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdAt    DateTime @default(now()) @map("created_at")

  @@unique([from, to], name: "unique_from_to")
  @@map(name: "exchange_rates")
}

model Currency {
  currency                  String         @id @unique
  sticker                   String
  adminWallet               String         @map("admin_wallet")
  FromCurrencyExchangeRates ExchangeRate[] @relation("FromCurrencyExchangeRates")
  ToCurrencyExchangeRates   ExchangeRate[] @relation("ToCurrencyExchangeRates")

  @@map("currencies")
}
